/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Dialog;

import ButtonRenderer.ImageTextRenderer;
import Business.ConferenceBus;
import Business.PlaceBus;
import MainScreenUI.MainScreen;
import POJO.Conference;
import POJO.Place;
import com.toedter.calendar.JDateChooser;
import java.io.File;
import java.io.IOException;
import java.net.URI;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ADMIN
 */
public class NewConferenceDialog extends java.awt.Dialog {

    /**
     * Creates new form NewConferenceDialog
     */
    boolean edit;
    Conference conference;
    MainScreen mainScreen;
    Edit_DetailConferenceDialog editDetail = null;
    Path pathString;

    public NewConferenceDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        edit = false;
        List<Place> listPlace = PlaceBus.getAllPlace();
        Collections.sort(listPlace);
        jPlaceChooser.removeAllItems();
        DefaultComboBoxModel oldModel = (DefaultComboBoxModel) jPlaceChooser.getModel();

        if (listPlace != null) {
            for (int i = 0; i < listPlace.size(); i++) {
                oldModel.addElement(listPlace.get(i));
            }
        }
    }

    public NewConferenceDialog(java.awt.Frame parent, boolean modal, Conference conference, Edit_DetailConferenceDialog editDetail) {
        super(parent, modal);
        initComponents();
        this.conference = conference;
        this.edit = true;
        this.mainScreen = mainScreen;
        this.editDetail = editDetail;

        jNameText.setText(conference.getName());
        jImageText.setText(conference.getImage());
        reset(conference.getPlace().getId());
        jDateChooser.setDate(conference.getStartTime());
        jStartTime.setValue(conference.getStartTime());
        jEndTime.setValue(conference.getEndTime());
        jBriefText.setText(conference.getBriefDescription());
        jDetailText.setText(conference.getDetailDescription());
        jCapacityTF.setText(String.valueOf(conference.getParticipants()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jInformationConference = new javax.swing.JPanel();
        jName = new javax.swing.JLabel();
        jNameText = new javax.swing.JTextField();
        jImage = new javax.swing.JLabel();
        jImageText = new javax.swing.JTextField();
        jAddImagebtn = new javax.swing.JButton();
        jPlace = new javax.swing.JLabel();
        jPlaceChooser = new javax.swing.JComboBox<>();
        jAddNewPlace = new javax.swing.JButton();
        jDate = new javax.swing.JLabel();
        jDateChooser = new com.toedter.calendar.JDateChooser();
        jStart = new javax.swing.JLabel();
        Date dateStart = new Date(0);

        SpinnerDateModel smStart = new SpinnerDateModel(dateStart, null, null, Calendar.HOUR_OF_DAY);
        jStartTime = new javax.swing.JSpinner(smStart);
        jEnd = new javax.swing.JLabel();
        Date dateEnd = new Date(0);

        SpinnerDateModel smEnd = new SpinnerDateModel(dateEnd, null, null, Calendar.HOUR_OF_DAY);
        jEndTime = new javax.swing.JSpinner(smEnd);
        jLabel1 = new javax.swing.JLabel();
        jDetail = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jDetailText = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jBriefText = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jCapacityTF = new javax.swing.JTextField();
        jFooter = new javax.swing.JPanel();
        jOKBtn = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        jInformationConference.setPreferredSize(new java.awt.Dimension(600, 600));
        jInformationConference.setLayout(new java.awt.GridBagLayout());

        jName.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jName.setText("Name");
        jName.setPreferredSize(new java.awt.Dimension(100, 50));
        jInformationConference.add(jName, new java.awt.GridBagConstraints());

        jNameText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jNameText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jNameText.setPreferredSize(new java.awt.Dimension(400, 40));
        jNameText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNameTextActionPerformed(evt);
            }
        });
        jInformationConference.add(jNameText, new java.awt.GridBagConstraints());

        jImage.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jImage.setText("Image");
        jImage.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jInformationConference.add(jImage, gridBagConstraints);

        jImageText.setEditable(false);
        jImageText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jImageText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jImageText.setPreferredSize(new java.awt.Dimension(400, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        jInformationConference.add(jImageText, gridBagConstraints);

        jAddImagebtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jAddImagebtn.setText("ADD");
        jAddImagebtn.setPreferredSize(new java.awt.Dimension(80, 40));
        jAddImagebtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jAddImagebtnMousePressed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 1;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jInformationConference.add(jAddImagebtn, gridBagConstraints);

        jPlace.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jPlace.setText("Place");
        jPlace.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jInformationConference.add(jPlace, gridBagConstraints);

        List<Place> listPlace = PlaceBus.getAllPlace();
        Collections.sort(listPlace);
        Place[] listPlaceString;
        if(listPlace != null)
        {
            listPlaceString = new Place[listPlace.size()];
            for(int i = 0; i < listPlace.size(); i++)
            listPlaceString[i] = listPlace.get(i);
        }
        else
        {
            listPlaceString = new Place[]{};
        }
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        jPlaceChooser.setModel(model);
        for(int i = 0; i < listPlace.size(); i++)
        model.addElement(listPlace.get(i));
        jPlaceChooser.setRenderer(new ImageTextRenderer());
        jPlaceChooser.setBorder(null);
        jPlaceChooser.setPreferredSize(new java.awt.Dimension(400, 40));
        jPlaceChooser.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jPlaceChooserMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jInformationConference.add(jPlaceChooser, gridBagConstraints);

        jAddNewPlace.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jAddNewPlace.setText("ADD");
        jAddNewPlace.setPreferredSize(new java.awt.Dimension(80, 40));
        jAddNewPlace.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jAddNewPlaceMouseReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 2;
        jInformationConference.add(jAddNewPlace, gridBagConstraints);

        jDate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jDate.setText("Date");
        jDate.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jInformationConference.add(jDate, gridBagConstraints);

        jDateChooser.setDateFormatString("dd/MM/yyyy");
        jDateChooser.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jDateChooser.setPreferredSize(new java.awt.Dimension(400, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 3;
        jInformationConference.add(jDateChooser, gridBagConstraints);

        jStart.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jStart.setText("Start");
        jStart.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        jInformationConference.add(jStart, gridBagConstraints);

        JSpinner.DateEditor deStart = new JSpinner.DateEditor(jStartTime, "HH:mm:ss");

        jStartTime.setEditor(deStart);
        jStartTime.setPreferredSize(new java.awt.Dimension(100, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jInformationConference.add(jStartTime, gridBagConstraints);

        jEnd.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jEnd.setText("End");
        jEnd.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.insets = new java.awt.Insets(0, 100, 0, 0);
        jInformationConference.add(jEnd, gridBagConstraints);

        jEndTime.setPreferredSize(new java.awt.Dimension(100, 40));
        JSpinner.DateEditor deEnd = new JSpinner.DateEditor(jEndTime, "HH:mm:ss");

        jEndTime.setEditor(deEnd);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jInformationConference.add(jEndTime, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel1.setText("Brief Description");
        jLabel1.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jInformationConference.add(jLabel1, gridBagConstraints);

        jDetail.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jDetail.setText("Detail Decription");
        jDetail.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jInformationConference.add(jDetail, gridBagConstraints);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(400, 150));

        jDetailText.setColumns(20);
        jDetailText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jDetailText.setLineWrap(true);
        jDetailText.setRows(5);
        jDetailText.setWrapStyleWord(true);
        jDetailText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jScrollPane1.setViewportView(jDetailText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 7;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        jInformationConference.add(jScrollPane1, gridBagConstraints);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setPreferredSize(new java.awt.Dimension(400, 100));

        jBriefText.setColumns(20);
        jBriefText.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        jBriefText.setLineWrap(true);
        jBriefText.setRows(5);
        jBriefText.setWrapStyleWord(true);
        jBriefText.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 10, 1, 10));
        jScrollPane2.setViewportView(jBriefText);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 6;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jInformationConference.add(jScrollPane2, gridBagConstraints);

        jLabel2.setPreferredSize(new java.awt.Dimension(400, 40));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 7;
        jInformationConference.add(jLabel2, gridBagConstraints);

        jLabel3.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel3.setText("Capacity");
        jLabel3.setPreferredSize(new java.awt.Dimension(100, 50));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        jInformationConference.add(jLabel3, gridBagConstraints);

        jCapacityTF.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jCapacityTF.setPreferredSize(new java.awt.Dimension(400, 40));
        jCapacityTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCapacityTFActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridy = 5;
        jInformationConference.add(jCapacityTF, gridBagConstraints);

        add(jInformationConference, java.awt.BorderLayout.NORTH);

        jFooter.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 10, 5, 5));
        jFooter.setPreferredSize(new java.awt.Dimension(600, 50));
        jFooter.setLayout(new java.awt.BorderLayout());

        jOKBtn.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jOKBtn.setText("OK");
        jOKBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jOKBtnMouseReleased(evt);
            }
        });
        jFooter.add(jOKBtn, java.awt.BorderLayout.LINE_END);

        add(jFooter, java.awt.BorderLayout.SOUTH);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
//        MainScreen.getInstance().resetConferenceUI();
        dispose();
    }//GEN-LAST:event_closeDialog

    private void jNameTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNameTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jNameTextActionPerformed

    private void jAddImagebtnMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAddImagebtnMousePressed
        // TODO add your handling code here:
        JFileChooser file = new JFileChooser();
        file.setCurrentDirectory(new File(System.getProperty("user.home")));
        FileNameExtensionFilter filter = new FileNameExtensionFilter("*.Images", "jpg", "png");
        file.addChoosableFileFilter(filter);

        int result = file.showSaveDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File seleFile = file.getSelectedFile();
            pathString = seleFile.toPath();
            String path = seleFile.getName();
            jImageText.setText(path);

        }
    }//GEN-LAST:event_jAddImagebtnMousePressed

    private void jPlaceChooserMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlaceChooserMouseReleased
        // TODO add your handling code here:

    }//GEN-LAST:event_jPlaceChooserMouseReleased

    private void jAddNewPlaceMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAddNewPlaceMouseReleased
        // TODO add your handling code here:

        new NewPlaceDialog(MainScreen.getInstance(), true, this).setVisible(true);
    }//GEN-LAST:event_jAddNewPlaceMouseReleased

    private void jCapacityTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCapacityTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCapacityTFActionPerformed

    private void jOKBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jOKBtnMouseReleased
        // TODO add your handling code here:
        if (edit == false) {
            if (!fullInformation()) {
                return;
            }

            if (!checkValid(edit)) {
                return;
            }

            Place choicePlace = (Place) jPlaceChooser.getSelectedItem();
            String result = ConferenceBus.insertNewConference(new Conference(choicePlace, jNameText.getText(), jBriefText.getText(), jDetailText.getText(), jImageText.getText(), convert(jDateChooser, jStartTime), convert(jDateChooser, jEndTime), Integer.valueOf(jCapacityTF.getText())));

            if (result != null) {
                String filePath = new File("").getAbsolutePath() + "\\Picture\\" + jImageText.getText();
                Path des;

                des = Paths.get(filePath);
                
                try {
                    Files.copy(pathString, des, StandardCopyOption.REPLACE_EXISTING);
                } catch (IOException ex) {
                    Logger.getLogger(NewConferenceDialog.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(MainScreen.getInstance(), "Success");
            } else {
                JOptionPane.showMessageDialog(MainScreen.getInstance(), "Fail");
            }
            MainScreen.getInstance().getConferenceUI().resetData();
            setVisible(false);
        } else {
            if (!fullInformation()) {
                return;
            }

            if (!checkValid(edit)) {
                return;
            }

            Place choicePlace = (Place) jPlaceChooser.getSelectedItem();

            Conference editConference = ConferenceBus.getConferenceInformation(conference.getId());
            editConference.setPlace(choicePlace);
            editConference.setName(jNameText.getText());
            editConference.setBriefDescription(jBriefText.getText());
            editConference.setDetailDescription(jDetailText.getText());
            editConference.setImage(jImageText.getText());
            editConference.setStartTime(convert(jDateChooser, jStartTime));
            editConference.setEndTime(convert(jDateChooser, jEndTime));
            editConference.setParticipants(Integer.valueOf(jCapacityTF.getText()));

            boolean result = ConferenceBus.updateConfereneInformation(editConference);

            if (result) {
                JOptionPane.showMessageDialog(this, "Successful Update");
            } else {
                JOptionPane.showMessageDialog(this, "Failed Update");
            }

            editDetail.resetData();
            setVisible(false);
        }
    }//GEN-LAST:event_jOKBtnMouseReleased

    private boolean fullInformation() {
        if (jNameText.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Conference Name is empty");
            return false;
        }

        if (jImageText.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Image Path is empty");
            return false;
        }

        if (jDateChooser.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Organized date is null");
            return false;
        }

        if (jCapacityTF.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Capacity is empty");
            return false;
        }

        if (jBriefText.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Brief description is empty");
            return false;
        }

        if (jDetailText.getText().compareTo("") == 0) {
            JOptionPane.showMessageDialog(this, "Detail description is empty");
            return false;
        }

        return true;
    }

    private boolean checkValid(boolean isEdit) {
        Place choicePlace = (Place) jPlaceChooser.getSelectedItem();

        Date startTime = convert(jDateChooser, jStartTime);
        Date endTime = convert(jDateChooser, jEndTime);

        Object[] conferences = choicePlace.getConferences().toArray();

        if (edit == true) {
            for (int i = 0; i < conferences.length; i++) {
                Conference temp = (Conference) conferences[i];

                if (temp.getId().compareTo(conference.getId()) != 0) {
                    if ((startTime.compareTo(temp.getStartTime()) >= 0 && startTime.compareTo(temp.getEndTime()) <= 0) || (endTime.compareTo(temp.getStartTime()) >= 0 && endTime.compareTo(temp.getEndTime()) <= 0)
                            || (temp.getStartTime().compareTo(startTime) >= 0 && temp.getStartTime().compareTo(endTime) <= 0) || (temp.getEndTime().compareTo(startTime) >= 0 && temp.getEndTime().compareTo(endTime) <= 0)) {
                        JOptionPane.showMessageDialog(this, "The place which you choose will host the  " + temp.getName() + " conference from " + temp.getStartTime().toString() + " to " + temp.getEndTime().toString());
                        return false;
                    }
                }

            }
        } else {
            for (int i = 0; i < conferences.length; i++) {
                Conference temp = (Conference) conferences[i];
                if ((startTime.compareTo(temp.getStartTime()) >= 0 && startTime.compareTo(temp.getEndTime()) <= 0) || (endTime.compareTo(temp.getStartTime()) >= 0 && endTime.compareTo(temp.getEndTime()) <= 0)
                        || (temp.getStartTime().compareTo(startTime) >= 0 && temp.getStartTime().compareTo(endTime) <= 0) || (temp.getEndTime().compareTo(startTime) >= 0 && temp.getEndTime().compareTo(endTime) <= 0)) {
                    JOptionPane.showMessageDialog(this, "The place which you choose will host the  " + temp.getName() + " conference from " + temp.getStartTime().toString() + " to " + temp.getEndTime().toString());
                    return false;
                }
            }
        }

        int capacity = 0;

        try {
            capacity = Integer.valueOf(jCapacityTF.getText());
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(MainScreen.getInstance(), "Capacity must be number");
            return false;
        }

        if (capacity <= 0) {
            JOptionPane.showMessageDialog(this, "Capacity needs to be greater than zero");
            return false;
        }

        if (capacity > choicePlace.getCapacity()) {
            JOptionPane.showMessageDialog(MainScreen.getInstance(), "Capacity of " + choicePlace.getName() + " is " + choicePlace.getCapacity());
            return false;
        }

        if (startTime.compareTo(endTime) > 0) {
            JOptionPane.showMessageDialog(MainScreen.getInstance(), "Organization time is invalid");
            return false;
        }

        if (startTime.compareTo(new Date()) < 0) {
            JOptionPane.showMessageDialog(MainScreen.getInstance(), "Organization time is invalid");
            return false;
        }

        return true;
    }

    private static Date convert(JDateChooser date, JSpinner time) {
        DateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        Date getDate = null;

        try {
            getDate = formatter.parse(formatter.format(date.getDate()));
        } catch (ParseException ex) {
        }

        Date getTime = (Date) time.getValue();
        SimpleDateFormat format = new SimpleDateFormat("HH:mm:ss");
        String timeString = format.format(getTime);
        Long totalTime = (Long.valueOf(timeString.substring(0, 2)) * 3600 + Long.valueOf(timeString.substring(3, 5)) * 60 + Long.valueOf(timeString.substring(6))) * 1000;

        return new Date(totalTime + getDate.getTime());
    }

    public void reset(String position) {
        List<Place> listPlace = PlaceBus.getAllPlace();
        Collections.sort(listPlace);
        jPlaceChooser.removeAllItems();
        DefaultComboBoxModel oldModel = (DefaultComboBoxModel) jPlaceChooser.getModel();
        if (listPlace != null) {
            for (int i = 0; i < listPlace.size(); i++) {
                oldModel.addElement(listPlace.get(i));
            }
        }

        for (int i = 0; i < listPlace.size(); i++) {
            if (listPlace.get(i).getId().compareTo(position) == 0) {
                jPlaceChooser.setSelectedIndex(i);
                return;
            }
        }

    }
    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddImagebtn;
    private javax.swing.JButton jAddNewPlace;
    private javax.swing.JTextArea jBriefText;
    private javax.swing.JTextField jCapacityTF;
    private javax.swing.JLabel jDate;
    private com.toedter.calendar.JDateChooser jDateChooser;
    private javax.swing.JLabel jDetail;
    private javax.swing.JTextArea jDetailText;
    private javax.swing.JLabel jEnd;
    private javax.swing.JSpinner jEndTime;
    private javax.swing.JPanel jFooter;
    private javax.swing.JLabel jImage;
    private javax.swing.JTextField jImageText;
    private javax.swing.JPanel jInformationConference;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jName;
    private javax.swing.JTextField jNameText;
    private javax.swing.JButton jOKBtn;
    private javax.swing.JLabel jPlace;
    private javax.swing.JComboBox<String> jPlaceChooser;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jStart;
    private javax.swing.JSpinner jStartTime;
    // End of variables declaration//GEN-END:variables
}
